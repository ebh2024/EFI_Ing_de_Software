"""
Django settings for aerolinea_project project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Define el directorio base del proyecto.
BASE_DIR = Path(__file__).resolve().parent.parent


# Configuración de desarrollo rápido - no apto para producción
# Consulta https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# ADVERTENCIA DE SEGURIDAD: ¡mantén la clave secreta utilizada en producción en secreto!
SECRET_KEY = 'django-insecure-ch$9dp==nwc1jj8sf3mn$qd9e^rs#!!nw4!-nq$1rh+l+-fr#l'

# ADVERTENCIA DE SEGURIDAD: ¡no actives el modo de depuración en producción!
DEBUG = True

# Lista de hosts permitidos para servir la aplicación.
ALLOWED_HOSTS = ["*"]


# Definición de aplicaciones

# Lista de aplicaciones instaladas en el proyecto.
INSTALLED_APPS = [
    'django.contrib.admin', # Panel de administración de Django.
    'django.contrib.auth', # Sistema de autenticación de Django.
    'django.contrib.contenttypes', # Tipos de contenido para modelos.
    'django.contrib.sessions', # Gestión de sesiones.
    'django.contrib.messages', # Framework de mensajes.
    'django.contrib.staticfiles', # Gestión de archivos estáticos.
    'gestion', # Aplicación principal de gestión de aerolínea.
    'crispy_forms', # Integración de formularios Django con frameworks CSS.
    "crispy_bootstrap5", # Plantillas de Crispy Forms para Bootstrap 5.
]

# Configuración para crispy-forms.
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Lista de middlewares que procesan las solicitudes y respuestas.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware', # Protege contra ataques comunes.
    'django.contrib.sessions.middleware.SessionMiddleware', # Habilita el soporte de sesiones.
    'django.middleware.locale.LocaleMiddleware', # Habilita la selección de idioma basada en la solicitud.
    'django.middleware.common.CommonMiddleware', # Normaliza las solicitudes.
    'django.middleware.csrf.CsrfViewMiddleware', # Protección contra CSRF.
    'django.contrib.auth.middleware.AuthenticationMiddleware', # Asocia usuarios a las solicitudes.
    'django.contrib.messages.middleware.MessageMiddleware', # Habilita el soporte de mensajes.
    'django.middleware.clickjacking.XFrameOptionsMiddleware', # Protección contra clickjacking.
]

# URLconf raíz del proyecto.
ROOT_URLCONF = 'aerolinea_project.urls'

# Configuración de plantillas.
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [], # Directorios adicionales donde Django buscará plantillas.
        'APP_DIRS': True, # Permite que las aplicaciones busquen sus propias plantillas.
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request', # Añade el objeto request al contexto de la plantilla.
                'django.contrib.auth.context_processors.auth', # Añade variables relacionadas con la autenticación.
                'django.contrib.messages.context_processors.messages', # Añade mensajes al contexto.
            ],
        },
    },
]

# Aplicación WSGI para servir el proyecto.
WSGI_APPLICATION = 'aerolinea_project.wsgi.application'


# Configuración de la base de datos
# Consulta https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'db',
        'PORT': 5432,
    }
}


# Validación de contraseñas
# Consulta https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

# Validadores de contraseñas para mejorar la seguridad.
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internacionalización
# Consulta https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us' # Idioma por defecto del proyecto.

TIME_ZONE = 'UTC' # Zona horaria del proyecto.

USE_I18N = True # Habilita el sistema de traducción de Django.

USE_TZ = True # Habilita el soporte de zonas horarias.

# Define los idiomas disponibles para la aplicación.
LANGUAGES = [
    ('en', 'English'),
    ('es', 'Spanish'),
]

# Directorio donde Django buscará los archivos de traducción.
LOCALE_PATHS = [
    BASE_DIR / 'locale',
]


# Archivos estáticos (CSS, JavaScript, Imágenes)
# Consulta https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/' # URL para servir archivos estáticos.
STATIC_ROOT = BASE_DIR / 'staticfiles' # Directorio donde se recolectarán los archivos estáticos para producción.

# Tipo de campo de clave primaria por defecto
# Consulta https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField' # Tipo de campo de clave primaria por defecto para modelos.

# URLs de redirección para autenticación.
LOGIN_REDIRECT_URL = '/' # URL a la que se redirige después de iniciar sesión.
LOGIN_URL = 'login' # URL para la página de inicio de sesión.

# Configuración de la sesión para que expire cuando el navegador se cierre.
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 1209600  # 2 weeks, in seconds

# Backend de correo electrónico para desarrollo (imprime correos en la consola).
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

SECURE_CROSS_ORIGIN_OPENER_POLICY = None


import os
from dotenv import load_dotenv
import logging
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.logging import LoggingIntegration

load_dotenv()

sentry_logging = LoggingIntegration(
    level=logging.INFO,  # Captura mensajes de nivel INFO y superiores
    event_level=logging.ERROR  # Captura mensajes de nivel ERROR y superiores como eventos
)

sentry_sdk.init(
    dsn=os.getenv("SENTRY_DSN"),  # DSN de Sentry para la aplicación.

    integrations=[
        DjangoIntegration(),
        sentry_logging
    ],

    # Add data like request headers and IP for users,
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
)

# Configuración de Sentry para monitoreo de errores.

# Configuración de Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'debug.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'gestion': { # Logger para tu aplicación 'gestion'
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
}
